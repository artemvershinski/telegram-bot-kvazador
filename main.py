import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import datetime
import os
from flask import Flask
from threading import Thread
import time

# Flask –¥–ª—è keep-alive
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ Bot is alive and running!"

@app.route('/health')
def health():
    return "OK", 200

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

def init_db():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT)''')
    conn.commit()
    conn.close()

def register_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('users.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?, ?)", 
              (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

# üëá –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ int, –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª
ADMIN_ID = 8401905691

user_reply_mode = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = int(message.from_user.id)
    register_user(user_id, 
                  message.from_user.username, 
                  message.from_user.first_name, 
                  message.from_user.last_name)

    welcome_text = """
–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è kvzdr.
–î–ª—è —Å–≤—è–∑–∏ —Å kvzdr —Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) –∑–¥–µ—Å—å. 
–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ª–∏–±–æ –≤–∞–º –≤ –õ–°.

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –µ–º—É –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.

–°–∞–º kvzdr —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ —ç—Ç–æ —á–∞—Ç —Å –Ω–∏–º, –∞ –Ω–µ –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç —Å –±–æ—Ç–æ–º-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."))
    bot.send_message(user_id, welcome_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.")
def handle_contact_request(message):
    user_id = int(message.from_user.id)
    bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    bot.send_message(
        ADMIN_ID,
        f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} "
        f"@{message.from_user.username or '–±–µ–∑ username'} "
        f"(ID: {user_id}) –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è."
    )

@bot.message_handler(commands=['reply'])
def start_reply_mode(message):
    user_id = int(message.from_user.id)
    if user_id != ADMIN_ID:
        bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        target_id = int(message.text.split()[1])
        user_reply_mode[ADMIN_ID] = target_id
        bot.send_message(ADMIN_ID, f"üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {target_id}")
    except (IndexError, ValueError):
        bot.send_message(ADMIN_ID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /reply user_id\n–ü—Ä–∏–º–µ—Ä: /reply 123456789")

@bot.message_handler(commands=['stop'])
def stop_reply_mode(message):
    user_id = int(message.from_user.id)
    if user_id == ADMIN_ID:
        if ADMIN_ID in user_reply_mode:
            del user_reply_mode[ADMIN_ID]
            bot.send_message(ADMIN_ID, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")
        else:
            bot.send_message(ADMIN_ID, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")

@bot.message_handler(func=lambda message: int(message.from_user.id) == ADMIN_ID and ADMIN_ID in user_reply_mode)
def handle_admin_reply(message):
    if message.content_type != 'text':
        bot.send_message(ADMIN_ID, "‚ùå –í —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
        return

    target_user_id = user_reply_mode[ADMIN_ID]

    try:
        bot.send_message(target_user_id, f"üíå –û—Ç–≤–µ—Ç –æ—Ç kvzdr:\n\n{message.text}")
        bot.send_message(ADMIN_ID, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {target_user_id}")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.message_handler(content_types=['text'])
def forward_text_message(message):
    user_id = int(message.from_user.id)

    if message.text.startswith('/'):
        return

    if message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.":
        return  # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

    if user_id == ADMIN_ID and ADMIN_ID not in user_reply_mode:
        bot.send_message(ADMIN_ID, "‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reply user_id")
        return

    user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
    if message.from_user.last_name:
        user_info += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    user_info += f"\nüÜî ID: {user_id}"
    user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

    try:
        bot.send_message(ADMIN_ID, f"{user_info}\n\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")
        bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    except:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(content_types=['photo', 'voice', 'video', 'document', 'audio'])
def forward_media_message(message):
    user_id = int(message.from_user.id)

    user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
    if message.from_user.last_name:
        user_info += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    user_info += f"\nüÜî ID: {user_id}"
    user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

    caption = f"{user_info}\n\n"
    if message.caption:
        caption += f"üìù –ü–æ–¥–ø–∏—Å—å: {message.caption}"

    try:
        if message.photo:
            bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption)
        elif message.voice:
            bot.send_voice(ADMIN_ID, message.voice.file_id, caption=caption)
        elif message.video:
            bot.send_video(ADMIN_ID, message.video.file_id, caption=caption)
        elif message.document:
            bot.send_document(ADMIN_ID, message.document.file_id, caption=caption)
        elif message.audio:
            bot.send_audio(ADMIN_ID, message.audio.file_id, caption=caption)

        bot.send_message(user_id, "‚úÖ –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ kvzdr!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.")

@bot.message_handler(content_types=['contact', 'location'])
def forward_contact_location(message):
    user_id = int(message.from_user.id)

    user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    user_info += f"\nüÜî ID: {user_id}"
    user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

    try:
        if message.contact:
            bot.send_contact(
                ADMIN_ID,
                message.contact.phone_number,
                message.contact.first_name,
            )
            bot.send_message(ADMIN_ID, f"{user_info}\nüìû –ü—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç")
        elif message.location:
            bot.send_location(
                ADMIN_ID,
                message.location.latitude,
                message.location.longitude,
            )
            bot.send_message(ADMIN_ID, f"{user_info}\nüìç –ü—Ä–∏—Å–ª–∞–ª –ª–æ–∫–∞—Ü–∏—é")

        bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã kvzdr!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞/–ª–æ–∫–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

def start_bot():
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        print(f"‚úÖ –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")

        bot.get_me()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π polling —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
        while True:
            try:
                bot.infinity_polling(
                    timeout=60,
                    long_polling_timeout=60,
                    logger_level="INFO"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)
        start_bot()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è keep-alive
    start_bot()   # –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ Telegram-–±–æ—Ç–∞—á
