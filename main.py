#!/usr/bin/env python3
# coding: utf-8

import os
import time
import logging
import sqlite3
import datetime
from threading import Thread

from flask import Flask
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# ----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ----------------------------
LOGFILE = os.environ.get("BOT_LOGFILE", "bot.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler(LOGFILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ----------------------------
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (5 —Å–µ–∫—É–Ω–¥)
# ----------------------------
user_last_message_time = {}
MESSAGE_COOLDOWN = 5  # —Å–µ–∫—É–Ω–¥

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (30 —Å–µ–∫—É–Ω–¥)
button_cooldown_users = {}
BUTTON_COOLDOWN = 30  # —Å–µ–∫—É–Ω–¥

def check_cooldown(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    current_time = time.time()
    last_time = user_last_message_time.get(user_id, 0)
    
    time_passed = current_time - last_time
    if time_passed < MESSAGE_COOLDOWN:
        return MESSAGE_COOLDOWN - time_passed
    
    user_last_message_time[user_id] = current_time
    return 0

def check_button_cooldown(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    current_time = time.time()
    last_time = button_cooldown_users.get(user_id, 0)
    
    time_passed = current_time - last_time
    if time_passed < BUTTON_COOLDOWN:
        return BUTTON_COOLDOWN - time_passed
    
    button_cooldown_users[user_id] = current_time
    return 0

def restore_button(user_id):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥"""
    time.sleep(BUTTON_COOLDOWN)
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."))
        bot.send_message(user_id, "‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!", reply_markup=markup)
    except Exception as e:
        logger.error(f"Failed to restore button for user {user_id}: {e}")

# ----------------------------
# Flask keep-alive
# ----------------------------
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot is alive and running!"

@app.route('/health')
def health():
    return "OK", 200

def run_flask():
    # –í Render –æ–±—ã—á–Ω–æ WSGI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–æ –¥–ª—è keep-alive  –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 8080)))
    except Exception as e:
        logger.exception("Flask failed: %s", e)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()
    logger.info("Flask keep-alive thread started.")

# –ë–æ—Ç –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment. Please set BOT_TOKEN.")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "8401905691"))

bot = telebot.TeleBot(BOT_TOKEN) if BOT_TOKEN else None

DB_PATH = os.environ.get("DB_PATH", "users.db")

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT)''')
        conn.commit()
        conn.close()
        logger.info("Database initialized at %s", DB_PATH)
    except Exception:
        logger.exception("Failed to initialize DB")

def register_user(user_id, username, first_name, last_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?, ?)",
                  (user_id, username, first_name, last_name))
        conn.commit()
        conn.close()
        logger.debug("Registered user %s (%s)", user_id, username)
    except Exception:
        logger.exception("Failed to register user %s", user_id)

user_reply_mode = {}

# ----------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# ----------------------------
if bot:
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        try:
            user_id = int(message.from_user.id)
            register_user(user_id,
                          message.from_user.username,
                          message.from_user.first_name,
                          message.from_user.last_name)

            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è kvazador.\n\n"
                "–î–ª—è —Å–≤—è–∑–∏ —Å kvazador —Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) –∑–¥–µ—Å—å. "
                "–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ª–∏–±–æ –≤–∞–º –≤ –õ–°.\n\n"
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –µ–º—É –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.\n\n"
                "–°–∞–º kvazador —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ —ç—Ç–æ —á–∞—Ç —Å –Ω–∏–º, –∞ –Ω–µ –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç —Å –±–æ—Ç–æ–º-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π."
            )

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton("üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."))
            bot.send_message(user_id, welcome_text, reply_markup=markup)
        except Exception:
            logger.exception("Error in /start handler for message: %s", message)

    @bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.")
    def handle_contact_request(message):
        try:
            user_id = int(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            cooldown_remaining = check_button_cooldown(user_id)
            if cooldown_remaining > 0:
                bot.send_message(
                    user_id, 
                    f"‚è≥ –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n\n"
                f"üïí –ö–Ω–æ–ø–∫–∞ —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {BUTTON_COOLDOWN} —Å–µ–∫—É–Ω–¥",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            bot.send_message(
                ADMIN_ID,
                f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} "
                f"@{message.from_user.username or '–±–µ–∑ username'} "
                f"(ID: {user_id}) –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            Thread(target=restore_button, args=(user_id,), daemon=True).start()
            
        except Exception:
            logger.exception("Error in contact request handler: %s", message)

    @bot.message_handler(commands=['reply'])
    def start_reply_mode(message):
        try:
            user_id = int(message.from_user.id)
            if user_id != ADMIN_ID:
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(ADMIN_ID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /reply user_id\n–ü—Ä–∏–º–µ—Ä: /reply 123456789")
                return

            try:
                target_id = int(parts[1])
            except ValueError:
                bot.send_message(ADMIN_ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            user_reply_mode[ADMIN_ID] = target_id
            bot.send_message(ADMIN_ID, f"üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {target_id}")
        except Exception:
            logger.exception("Error in /reply handler: %s", message)

    @bot.message_handler(commands=['stop'])
    def stop_reply_mode(message):
        try:
            user_id = int(message.from_user.id)
            if user_id == ADMIN_ID:
                if ADMIN_ID in user_reply_mode:
                    del user_reply_mode[ADMIN_ID]
                    bot.send_message(ADMIN_ID, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")
                else:
                    bot.send_message(ADMIN_ID, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")
        except Exception:
            logger.exception("Error in /stop handler: %s", message)

    @bot.message_handler(func=lambda message: int(message.from_user.id) == ADMIN_ID and ADMIN_ID in user_reply_mode)
    def handle_admin_reply(message):
        try:
            if message.content_type != 'text':
                bot.send_message(ADMIN_ID, "‚ùå –í —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                return

            target_user_id = user_reply_mode.get(ADMIN_ID)
            if not target_user_id:
                bot.send_message(ADMIN_ID, "‚ùå –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            try:
                bot.send_message(target_user_id, f"üíå –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç kvazador:\n\n{message.text}")
                bot.send_message(ADMIN_ID, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {target_user_id}")
            except Exception as e:
                logger.exception("Failed to send admin reply to %s: %s", target_user_id, e)
                bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        except Exception:
            logger.exception("Error in admin reply handler: %s", message)

    @bot.message_handler(content_types=['text'])
    def forward_text_message(message):
        try:
            user_id = int(message.from_user.id)

            # –ò–≥–Ω–æ—Ä–∏–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)
            if message.text.startswith('/'):
                return

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            if message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.":
                return handle_contact_request(message)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
            if user_id != ADMIN_ID:
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            if user_id == ADMIN_ID and ADMIN_ID not in user_reply_mode:
                bot.send_message(ADMIN_ID, "‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reply user_id")
                return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.last_name:
                user_info += f" {message.from_user.last_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            bot.send_message(ADMIN_ID, f"{user_info}\n\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")
            bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ kvazador!")
        except Exception as e:
            logger.exception("Failed to forward text message from %s: %s", getattr(message, "from_user", None), e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å kvazador –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception:
                logger.exception("Also failed to notify user about forwarding error.")

    @bot.message_handler(content_types=['photo', 'voice', 'video', 'document', 'audio'])
    def forward_media_message(message):
        try:
            user_id = int(message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
            if user_id != ADMIN_ID:
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.last_name:
                user_info += f" {message.from_user.last_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            caption = f"{user_info}\n\n"
            if message.caption:
                caption += f"üìù –ü–æ–¥–ø–∏—Å—å: {message.caption}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω—É
            if message.photo:
                bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption)
            elif message.voice:
                bot.send_voice(ADMIN_ID, message.voice.file_id, caption=caption)
            elif message.video:
                bot.send_video(ADMIN_ID, message.video.file_id, caption=caption)
            elif message.document:
                bot.send_document(ADMIN_ID, message.document.file_id, caption=caption)
            elif message.audio:
                bot.send_audio(ADMIN_ID, message.audio.file_id, caption=caption)
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–∫—Ä—ã—Ç
                bot.send_message(ADMIN_ID, f"{user_info}\nüì® –ü—Ä–∏—Å–ª–∞–ª –º–µ–¥–∏–∞, –Ω–æ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")

            bot.send_message(user_id, "‚úÖ –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ kvazador!")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: %s", e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.")
            except Exception:
                logger.exception("Failed to notify user about media send error.")

    @bot.message_handler(content_types=['contact', 'location'])
    def forward_contact_location(message):
        try:
            user_id = int(message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
            if user_id != ADMIN_ID:
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            if message.contact:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω—É
                bot.send_contact(
                    ADMIN_ID,
                    phone_number=message.contact.phone_number,
                    first_name=message.contact.first_name,
                    last_name=getattr(message.contact, "last_name", None)
                )
                bot.send_message(ADMIN_ID, f"{user_info}\nüìû –ü—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç")
            elif message.location:
                bot.send_location(
                    ADMIN_ID,
                    message.location.latitude,
                    message.location.longitude,
                )
                bot.send_message(ADMIN_ID, f"{user_info}\nüìç –ü—Ä–∏—Å–ª–∞–ª –ª–æ–∫–∞—Ü–∏—é")
            else:
                bot.send_message(ADMIN_ID, f"{user_info}\nüì® –ü—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç/–ª–æ–∫–∞—Ü–∏—é, –Ω–æ –¥–µ—Ç–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

            bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã kvazador!")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞/–ª–æ–∫–∞—Ü–∏–∏: %s", e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            except Exception:
                logger.exception("Failed to notify user about contact/location send error.")

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ----------------------------

def start_bot_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)."""
    if not bot:
        logger.error("Bot object is not created because BOT_TOKEN is missing.")
        return

    init_db()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    try:
        logger.info("Attempting bot.get_me() to verify token...")
        me = bot.get_me()
        logger.info("Bot connected as: %s (id=%s)", me.username, me.id)
    except Exception as e:
        logger.exception("Failed to connect to Telegram. Check BOT_TOKEN. %s", e)
        return

    logger.info("Bot is ready to receive messages.")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º polling –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
    while True:
        try:
            # logger_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–∑ –º–æ–¥—É–ª—è logging, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–æ–π
            bot.infinity_polling(
                timeout=60,
                long_polling_timeout=60,
                logger_level=logging.INFO
            )
        except Exception as e:
            logger.exception("Polling error: %s", e)
            logger.info("Restarting polling in 10 seconds...")
            time.sleep(10)

if __name__ == "__main__":
    keep_alive()
    try:
        start_bot_loop()
    except KeyboardInterrupt:
        logger.info("Bot stopped by KeyboardInterrupt")
    except Exception:
        logger.exception("Fatal error in main")
