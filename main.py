#!/usr/bin/env python3
# coding: utf-8

import os
import time
import logging
import sqlite3
import datetime
from threading import Thread
import requests
import json

from flask import Flask
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# ----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ----------------------------
LOGFILE = os.environ.get("BOT_LOGFILE", "bot.log")
ADMIN_LOGFILE = os.environ.get("ADMIN_LOGFILE", "admin_actions.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler(LOGFILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_logger = logging.getLogger('admin_actions')
admin_logger.setLevel(logging.INFO)
admin_handler = logging.FileHandler(ADMIN_LOGFILE, encoding='utf-8')
admin_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
admin_logger.addHandler(admin_handler)
admin_logger.propagate = False

def log_admin_action(admin_id, admin_name, action, target_info=""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    log_message = f"ADMIN {admin_id} ({admin_name}) - {action}"
    if target_info:
        log_message += f" - {target_info}"
    admin_logger.info(log_message)

# ----------------------------
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (5 —Å–µ–∫—É–Ω–¥)
# ----------------------------
user_last_message_time = {}
MESSAGE_COOLDOWN = 5  # —Å–µ–∫—É–Ω–¥

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (30 —Å–µ–∫—É–Ω–¥)
button_cooldown_users = {}
BUTTON_COOLDOWN = 30  # —Å–µ–∫—É–Ω–¥

def check_cooldown(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    current_time = time.time()
    last_time = user_last_message_time.get(user_id, 0)
    
    time_passed = current_time - last_time
    if time_passed < MESSAGE_COOLDOWN:
        return MESSAGE_COOLDOWN - time_passed
    
    user_last_message_time[user_id] = current_time
    return 0

def check_button_cooldown(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    current_time = time.time()
    last_time = button_cooldown_users.get(user_id, 0)
    
    time_passed = current_time - last_time
    if time_passed < BUTTON_COOLDOWN:
        return BUTTON_COOLDOWN - time_passed
    
    button_cooldown_users[user_id] = current_time
    return 0

def restore_button(user_id):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥"""
    time.sleep(BUTTON_COOLDOWN)
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."))
        bot.send_message(user_id, "‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!", reply_markup=markup)
    except Exception as e:
        logger.error(f"Failed to restore button for user {user_id}: {e}")

# ----------------------------
# Flask keep-alive
# ----------------------------
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot is alive and running!"

@app.route('/health')
def health():
    return "OK", 200

def run_flask():
    try:
        app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 8080)))
    except Exception as e:
        logger.exception("Flask failed: %s", e)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()
    logger.info("Flask keep-alive thread started.")

# –ë–æ—Ç –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment. Please set BOT_TOKEN.")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "8401905691"))

bot = telebot.TeleBot(BOT_TOKEN) if BOT_TOKEN else None

# –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ /tmp (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –¥–µ–ø–ª–æ—è–º–∏ –≤ Render)
DB_PATH = "/tmp/users.db"

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT, date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS admins
                     (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, is_main_admin BOOLEAN DEFAULT FALSE, date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS bans
                     (user_id INTEGER PRIMARY KEY, 
                      ban_type TEXT NOT NULL,
                      ban_duration_seconds INTEGER,
                      banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      ban_reason TEXT,
                      banned_by INTEGER,
                      unban_request_date TIMESTAMP)''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        c.execute("INSERT OR IGNORE INTO admins (user_id, username, first_name, is_main_admin) VALUES (?, ?, ?, ?)",
                  (ADMIN_ID, "main_admin", "Main Admin", True))
        
        conn.commit()
        conn.close()
        logger.info("Database initialized at %s", DB_PATH)
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        create_backup()
        
    except Exception as e:
        logger.exception("Failed to initialize DB: %s", e)

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if os.path.exists(DB_PATH):
            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –±–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_size = os.path.getsize(DB_PATH)
            logger.info("Database backup check - file exists, size: %s bytes", file_size)
        else:
            logger.warning("Database file not found for backup")
    except Exception as e:
        logger.error("Failed to create backup: %s", e)

def register_user(user_id, username, first_name, last_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                  (user_id, username, first_name, last_name))
        conn.commit()
        conn.close()
        logger.debug("Registered user %s (%s)", user_id, username)
    except Exception as e:
        logger.exception("Failed to register user %s: %s", user_id, e)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        conn.close()
        return result is not None
    except Exception as e:
        logger.exception("Failed to check admin status for %s: %s", user_id, e)
        return False

def is_main_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT user_id FROM admins WHERE user_id = ? AND is_main_admin = TRUE", (user_id,))
        result = c.fetchone()
        conn.close()
        return result is not None
    except Exception as e:
        logger.exception("Failed to check main admin status for %s: %s", user_id, e)
        return False

def add_admin(user_id, username, first_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO admins (user_id, username, first_name) VALUES (?, ?, ?)",
                  (user_id, username, first_name))
        conn.commit()
        conn.close()
        logger.info("Added admin %s (%s)", user_id, username)
        return True
    except Exception as e:
        logger.exception("Failed to add admin %s: %s", user_id, e)
        return False

def remove_admin(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ (–∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ)"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("DELETE FROM admins WHERE user_id = ? AND is_main_admin = FALSE", (user_id,))
        conn.commit()
        conn.close()
        logger.info("Removed admin %s", user_id)
        return True
    except Exception as e:
        logger.exception("Failed to remove admin %s: %s", user_id, e)
        return False

def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT user_id, username, first_name, last_name FROM users")
        users = c.fetchall()
        conn.close()
        return users
    except Exception as e:
        logger.exception("Failed to get users list: %s", e)
        return []

def get_user_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users")
        count = c.fetchone()[0]
        conn.close()
        return count
    except Exception as e:
        logger.exception("Failed to get user count: %s", e)
        return 0

def get_all_admins():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT user_id, username, first_name, is_main_admin FROM admins")
        admins = c.fetchall()
        conn.close()
        return admins
    except Exception as e:
        logger.exception("Failed to get admins list: %s", e)
        return []

def get_admin_logs(admin_id=None, days=30):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        cutoff_date = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime('%Y-%m-%d %H:%M:%S')
        
        with open(ADMIN_LOGFILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        logs = []
        for line in lines:
            try:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
                parts = line.strip().split(' - ', 2)
                if len(parts) >= 3:
                    timestamp = parts[0]
                    log_data = parts[2]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                    log_datetime = datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S,%f')
                    if log_datetime >= datetime.datetime.now() - datetime.timedelta(days=days):
                        
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
                        if admin_id:
                            # –ò—â–µ–º –ø–æ ID –∞–¥–º–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ADMIN {admin_id}"
                            if f"ADMIN {admin_id}" in log_data:
                                logs.append(line.strip())
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –ø–æ username –≤ –ª–æ–≥–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤
                            else:
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                                try:
                                    admin_chat = bot.get_chat(int(admin_id))
                                    if admin_chat.username and f"@{admin_chat.username}" in log_data:
                                        logs.append(line.strip())
                                except:
                                    pass
                        else:
                            logs.append(line.strip())
            except Exception as e:
                continue
        
        return logs
    except Exception as e:
        logger.exception("Failed to read admin logs: %s", e)
        return []

# ==================== –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í ====================

def ban_user(user_id, ban_type, duration_seconds=None, reason="", banned_by=None):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        
        if ban_type == "permanent":
            c.execute('''INSERT OR REPLACE INTO bans 
                        (user_id, ban_type, ban_duration_seconds, ban_reason, banned_by) 
                        VALUES (?, ?, ?, ?, ?)''',
                     (user_id, ban_type, None, reason, banned_by))
        else:  # temporary
            c.execute('''INSERT OR REPLACE INTO bans 
                        (user_id, ban_type, ban_duration_seconds, ban_reason, banned_by) 
                        VALUES (?, ?, ?, ?, ?)''',
                     (user_id, ban_type, duration_seconds, reason, banned_by))
        
        conn.commit()
        conn.close()
        logger.info("Banned user %s: type=%s, duration=%s", user_id, ban_type, duration_seconds)
        return True
    except Exception as e:
        logger.exception("Failed to ban user %s: %s", user_id, e)
        return False

def unban_user(user_id):
    """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("DELETE FROM bans WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        logger.info("Unbanned user %s", user_id)
        return True
    except Exception as e:
        logger.exception("Failed to unban user %s: %s", user_id, e)
        return False

def is_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT ban_type, ban_duration_seconds, banned_at, ban_reason FROM bans WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        conn.close()
        
        if not result:
            return None
        
        ban_type, duration_seconds, banned_at, reason = result
        
        # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if ban_type == "temporary" and duration_seconds:
            banned_time = datetime.datetime.strptime(banned_at, '%Y-%m-%d %H:%M:%S')
            current_time = datetime.datetime.now()
            time_passed = (current_time - banned_time).total_seconds()
            
            if time_passed >= duration_seconds:
                # –í—Ä–µ–º—è –±–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ - —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º
                unban_user(user_id)
                return None
            else:
                time_left = duration_seconds - time_passed
                return {
                    'type': ban_type,
                    'time_left': time_left,
                    'reason': reason
                }
        
        # –î–ª—è –ø–µ—Ä–º–∞—á–∞ –∏–ª–∏ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
        return {
            'type': ban_type,
            'reason': reason
        }
    except Exception as e:
        logger.exception("Failed to check ban status for %s: %s", user_id, e)
        return None

def format_time_left(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes} –º–∏–Ω—É—Ç {secs} —Å–µ–∫—É–Ω–¥"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"

def can_request_unban(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–±–∞–Ω (–ø—Ä–æ—à–ª–∞ –ª–∏ –Ω–µ–¥–µ–ª—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT unban_request_date FROM bans WHERE user_id = ? AND ban_type = 'permanent'", (user_id,))
        result = c.fetchone()
        conn.close()
        
        if not result or not result[0]:
            return True  # –ï—Å–ª–∏ –¥–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        
        last_request = datetime.datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        current_time = datetime.datetime.now()
        time_passed = (current_time - last_request).total_seconds()
        
        # 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return time_passed >= 7 * 24 * 3600
    except Exception as e:
        logger.exception("Failed to check unban request for %s: %s", user_id, e)
        return False

def update_unban_request_date(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω"""
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE bans SET unban_request_date = CURRENT_TIMESTAMP WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.exception("Failed to update unban request date for %s: %s", user_id, e)
        return False

user_reply_mode = {}
user_unban_mode = {}

# ----------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# ----------------------------
if bot:
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        try:
            user_id = int(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if ban_info:
                if ban_info['type'] == 'permanent':
                    bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞. –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban")
                else:
                    time_left = format_time_left(ban_info['time_left'])
                    bot.send_message(user_id, f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –î–æ —Ä–∞–∑–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return

            register_user(user_id,
                          message.from_user.username,
                          message.from_user.first_name,
                          message.from_user.last_name)

            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è kvazador.\n\n"
                "–î–ª—è —Å–≤—è–∑–∏ —Å kvazador —Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) –∑–¥–µ—Å—å. "
                "–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ª–∏–±–æ –≤–∞–º –≤ –õ–°.\n\n"
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –µ–º—É –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.\n\n"
                "–°–∞–º kvazador —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ. "
            )

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton("üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."))
            bot.send_message(user_id, welcome_text, reply_markup=markup)
        except Exception:
            logger.exception("Error in /start handler for message: %s", message)

    # ==================== –ö–û–ú–ê–ù–î–´ –ë–ê–ù–û–í ====================

    @bot.message_handler(commands=['ban'])
    def ban_command(message):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            parts = message.text.split()
            if len(parts) < 4:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /ban user_id –≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö –ø—Ä–∏—á–∏–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n/ban 123456789 3600 –°–ø–∞–º\n/ban 123456789 86400 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è")
                return

            try:
                target_id = int(parts[1])
                duration = int(parts[2])
                reason = ' '.join(parts[3:])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. user_id –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
                return

            if duration <= 0:
                bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –±–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

            # –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞
            if is_admin(target_id):
                bot.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            if ban_user(target_id, "temporary", duration, reason, user_id):
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
                try:
                    duration_text = format_time_left(duration)
                    bot.send_message(target_id, f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ {duration_text}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                except Exception as e:
                    logger.warning("Could not notify banned user %s: %s", target_id, e)

                bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {format_time_left(duration)}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω", f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}, –≤—Ä–µ–º—è: {duration}—Å–µ–∫, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception:
            logger.exception("Error in /ban handler: %s", message)

    @bot.message_handler(commands=['spermban'])
    def permanent_ban_command(message):
        """–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            parts = message.text.split()
            if len(parts) < 3:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /spermban user_id –ø—Ä–∏—á–∏–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n/spermban 123456789 –°–ø–∞–º\n/spermban 123456789 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è")
                return

            try:
                target_id = int(parts[1])
                reason = ' '.join(parts[2:])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            # –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞
            if is_admin(target_id):
                bot.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            if ban_user(target_id, "permanent", None, reason, user_id):
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
                try:
                    bot.send_message(target_id, f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban")
                except Exception as e:
                    logger.warning("Could not notify banned user %s: %s", target_id, e)

                bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω", f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception:
            logger.exception("Error in /spermban handler: %s", message)

    @bot.message_handler(commands=['unban'])
    def unban_request_command(message):
        """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–±–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–º–∞—á–µ–Ω–Ω—ã—Ö)"""
        try:
            user_id = int(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if not ban_info or ban_info['type'] != 'permanent':
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–±–∞–Ω (–ø—Ä–æ—à–ª–∞ –ª–∏ –Ω–µ–¥–µ–ª—è)
            if not can_request_unban(user_id):
                bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                return

            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑–±–∞–Ω–∞
            user_unban_mode[user_id] = True
            bot.send_message(user_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å —Ä–∞–∑–±–∞–Ω–∏—Ç—å. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, –≤–µ–¥—å —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.")
            
        except Exception:
            logger.exception("Error in /unban handler: %s", message)

    @bot.message_handler(commands=['obossat'])
    def unban_command(message):
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /obossat user_id\n\n–ü—Ä–∏–º–µ—Ä:\n/obossat 123456789")
                return

            try:
                target_id = int(parts[1])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            ban_info = is_banned(target_id)
            if not ban_info:
                bot.send_message(user_id, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
                return

            if unban_user(target_id):
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–∞–Ω–µ
                unban_message = "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã. –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞!"
                if len(parts) > 2:
                    unban_message = ' '.join(parts[2:])
                
                try:
                    bot.send_message(target_id, unban_message)
                except Exception as e:
                    logger.warning("Could not notify unbanned user %s: %s", target_id, e)

                bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "—Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception:
            logger.exception("Error in /obossat handler: %s", message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑–±–∞–Ω–∞
    @bot.message_handler(func=lambda message: int(message.from_user.id) in user_unban_mode and user_unban_mode[int(message.from_user.id)])
    def handle_unban_request(message):
        try:
            user_id = int(message.from_user.id)
            
            if message.content_type != 'text':
                bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f" (ID: {user_id}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–±–∞–Ω:\n\n{message.text}"

            admins = get_all_admins()
            for admin in admins:
                try:
                    bot.send_message(admin[0], user_info)
                except Exception as e:
                    logger.error(f"Failed to send unban request to admin {admin[0]}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞
            update_unban_request_date(user_id)
            
            # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞
            user_unban_mode[user_id] = False
            
            bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.")
            
        except Exception:
            logger.exception("Error in unban request handler: %s", message)

    # ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ê–ú–ò ====================

    @bot.message_handler(commands=['clearlogs'])
    def clear_logs_command(message):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π:\n/clearlogs all - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏\n/clearlogs 123456789 - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
                return

            target = parts[1]
            
            if target == 'all':
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
                open(ADMIN_LOGFILE, 'w', encoding='utf-8').close()
                bot.send_message(user_id, "‚úÖ –í—Å–µ –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—á–∏—â–µ–Ω—ã.")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "–æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤")
                
            else:
                try:
                    target_id = int(target)
                    # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                    logs = get_admin_logs(None, 36500)  # 100 –ª–µ—Ç = –≤—Å–µ –ª–æ–≥–∏
                    
                    # –ü–æ–ª—É—á–∞–µ–º username –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö
                    admin_username = None
                    try:
                        admin_chat = bot.get_chat(target_id)
                        admin_username = f"@{admin_chat.username}" if admin_chat.username else None
                    except:
                        pass
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏ - —É–¥–∞–ª—è–µ–º —Ç–µ, –≥–¥–µ –µ—Å—Ç—å ID –∞–¥–º–∏–Ω–∞ –ò–õ–ò –µ–≥–æ username
                    filtered_logs = []
                    for log in logs:
                        if f"ADMIN {target_id}" in log:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏ —Å ID –∞–¥–º–∏–Ω–∞
                        if admin_username and admin_username in log:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏ —Å username –∞–¥–º–∏–Ω–∞
                        filtered_logs.append(log)
                    
                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ –ª–æ–≥–æ–≤ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
                    with open(ADMIN_LOGFILE, 'w', encoding='utf-8') as f:
                        for log in filtered_logs:
                            f.write(log + '\n')
                    
                    bot.send_message(user_id, f"‚úÖ –õ–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_id} –æ—á–∏—â–µ–Ω—ã.")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                    log_admin_action(user_id, admin_name, "–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"–∞–¥–º–∏–Ω: {target_id}")
                    
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ –∏–ª–∏ 'all'")
                    
        except Exception:
            logger.exception("Error in /clearlogs handler: %s", message)

    @bot.message_handler(commands=['adminlogs'])
    def show_admin_logs(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            parts = message.text.split()
            days = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            target_admin_id = None
            if len(parts) >= 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ID –∞–¥–º–∏–Ω–∞
                try:
                    target_admin_id = int(parts[1])
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    if parts[1].lower() == 'all':
                        target_admin_id = None
                    else:
                        bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                                "/adminlogs - –ª–æ–≥–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n"
                                                "/adminlogs all - —Ç–æ –∂–µ —Å–∞–º–æ–µ\n"
                                                "/adminlogs 123456789 - –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞\n"
                                                "/adminlogs 123456789 7 - –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∞ –∑–∞ 7 –¥–Ω–µ–π")
                        return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            if len(parts) >= 3:
                try:
                    days = int(parts[2])
                    if days <= 0 or days > 365:
                        bot.send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")
                        return
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return

            bot.send_message(user_id, f"üîÑ –ü–æ–ª—É—á–∞—é –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")

            logs = get_admin_logs(target_admin_id, days)
            
            if not logs:
                if target_admin_id:
                    bot.send_message(user_id, f"üì≠ –õ–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_admin_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    bot.send_message(user_id, f"üì≠ –õ–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ª–æ–≥–æ–≤
            if target_admin_id:
                log_text = f"üìä –õ–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_admin_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n\n"
            else:
                log_text = f"üìä –õ–æ–≥–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –¥–∞—Ç–∞–º
            date_groups = {}
            for log in logs:
                try:
                    date_part = log.split(' ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    if date_part not in date_groups:
                        date_groups[date_part] = []
                    date_groups[date_part].append(log)
                except:
                    continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            for date, date_logs in sorted(date_groups.items(), reverse=True):
                log_text += f"üìÖ {date}:\n"
                
                for log in date_logs:
                    # –ü–∞—Ä—Å–∏–º –ª–æ–≥
                    log_parts = log.split(' - ', 2)
                    if len(log_parts) >= 3:
                        time_part = log_parts[0].split(' ')[1][:8]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                        admin_part = log_parts[1]
                        action_part = log_parts[2]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
                        admin_info = admin_part.replace('ADMIN ', '')
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                        formatted_action = action_part
                        
                        # –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
                        if "–≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞" in action_part or "–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞" in action_part:
                            continue
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if "–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" in action_part:
                            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
                            if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" in action_part and "–æ—Ç–≤–µ—Ç:" in action_part:
                                user_part = action_part.split("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")[1].split(" | ")[0]
                                response_text = action_part.split("–æ—Ç–≤–µ—Ç: ")[1]
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∞–¥–º–∏–Ω–∞
                                admin_id = admin_info.split(' ')[0]
                                admin_username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                                try:
                                    admin_chat = bot.get_chat(int(admin_id))
                                    admin_username = f"@{admin_chat.username}" if admin_chat.username else admin_chat.first_name
                                except:
                                    admin_username = f"ID: {admin_id}"
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                target_username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                                try:
                                    target_chat = bot.get_chat(int(user_part))
                                    target_username = f"@{target_chat.username}" if target_chat.username else target_chat.first_name
                                except:
                                    target_username = f"ID: {user_part}"
                                
                                formatted_action = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}\n–û—Ç–≤–µ—Ç: {response_text}"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        elif "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in action_part:
                            if "–Ω–æ–≤—ã–π –∞–¥–º–∏–Ω:" in action_part:
                                new_admin_info = action_part.split("–Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: ")[1]
                                formatted_action = f"–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: {new_admin_info}"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  
                        elif "—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in action_part:
                            if "—É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω:" in action_part:
                                removed_admin_id = action_part.split("—É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω: ")[1]
                                formatted_action = f"—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω: {removed_admin_id}"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                        elif "—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π" in action_part:
                            if "–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:" in action_part:
                                stats = action_part.split("—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - ")[1]
                                formatted_action = f"—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - {stats}"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        elif "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" in action_part:
                            formatted_action = "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        elif "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" in action_part:
                            formatted_action = "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                        elif "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤" in action_part:
                            formatted_action = "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–Ω—ã
                        elif "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω" in action_part or "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω" in action_part or "—Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in action_part:
                            formatted_action = action_part
                        
                        log_text += f"{time_part} - {formatted_action}\n"
                
                log_text += "\n"

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
                if len(log_text) > 3500:
                    bot.send_message(user_id, log_text)
                    log_text = ""

            if log_text:
                bot.send_message(user_id, log_text)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            bot.send_message(user_id, f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(logs)}")

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)
            if is_main_admin(user_id):
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                action = f"–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π"
                target_info = f"–∞–¥–º–∏–Ω {target_admin_id}" if target_admin_id else "–≤—Å–µ –∞–¥–º–∏–Ω—ã"
                log_admin_action(user_id, admin_name, action, target_info)
            
        except Exception:
            logger.exception("Error in /adminlogs handler: %s", message)

    @bot.message_handler(commands=['logstats'])
    def show_log_statistics(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–æ–≥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            parts = message.text.split()
            days = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            
            if len(parts) >= 2:
                try:
                    days = int(parts[1])
                    if days <= 0 or days > 365:
                        bot.send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")
                        return
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return

            bot.send_message(user_id, f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")

            logs = get_admin_logs(None, days)
            
            if not logs:
                bot.send_message(user_id, f"üì≠ –õ–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
            admin_actions = {}
            action_types = {}
            
            for log in logs:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
                    parts = log.split(' - ')
                    if len(parts) >= 3:
                        admin_part = parts[1]
                        action_part = parts[2]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–¥–º–∏–Ω–∞
                        admin_id = admin_part.split(' ')[1]
                        
                        # –°—á–∏—Ç–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∞–¥–º–∏–Ω–∞–º
                        if admin_id not in admin_actions:
                            admin_actions[admin_id] = 0
                        admin_actions[admin_id] += 1
                        
                        # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
                        action_type = action_part.split(' - ')[0] if ' - ' in action_part else action_part
                        if action_type not in action_types:
                            action_types[action_type] = 0
                        action_types[action_type] += 1
                except:
                    continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ {days} –¥–Ω–µ–π:\n\n"
            stats_text += f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(logs)}\n\n"
            
            stats_text += "üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:\n"
            for admin_id, count in sorted(admin_actions.items(), key=lambda x: x[1], reverse=True):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∞–¥–º–∏–Ω–∞
                admin_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                try:
                    admin_chat = bot.get_chat(int(admin_id))
                    admin_name = f"@{admin_chat.username}" if admin_chat.username else admin_chat.first_name
                except:
                    admin_name = f"ID: {admin_id}"
                
                stats_text += f"‚Ä¢ {admin_name}: {count} –¥–µ–π—Å—Ç–≤–∏–π\n"
            
            stats_text += "\nüìã –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:\n"
            for action_type, count in sorted(action_types.items(), key=lambda x: x[1], reverse=True):
                stats_text += f"‚Ä¢ {action_type}: {count} —Ä–∞–∑\n"

            bot.send_message(user_id, stats_text)

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
            log_admin_action(user_id, admin_name, f"–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π")
            
        except Exception:
            logger.exception("Error in /logstats handler: %s", message)

    # ==================== –°–ò–°–¢–ï–ú–ê –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø ====================

    @bot.message_handler(commands=['addadmin'])
    def add_admin_command(message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ê.")
                return

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /addadmin user_id\n–ü—Ä–∏–º–µ—Ä: /addadmin 123456789")
                return

            try:
                target_id = int(parts[1])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            # –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω —É–∂–µ –µ—Å—Ç—å)
            if target_id == user_id:
                bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –ì–ê.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                target_user = bot.get_chat(target_id)
                username = target_user.username
                first_name = target_user.first_name
            except Exception:
                username = None
                first_name = "Unknown"

            if add_admin(target_id, username, first_name):
                bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} (ID: {target_id}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"–Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: {target_id} ({first_name})")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                try:
                    bot.send_message(target_id, "üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!\n\n"
                                                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                                                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                "/getusers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                "/sendall - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                                                "/ban - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω\n"
                                                "/spermban - –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n"
                                                "/obossat - —Ä–∞–∑–±–∞–Ω")
                except Exception:
                    logger.warning("Could not notify new admin %s", target_id)
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception:
            logger.exception("Error in /addadmin handler: %s", message)

    @bot.message_handler(commands=['removeadmin'])
    def remove_admin_command(message):
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ê")

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /removeadmin user_id\n–ü—Ä–∏–º–µ—Ä: /removeadmin 123456789")
                return

            try:
                target_id = int(parts[1])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if target_id == user_id:
                bot.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            if remove_admin(target_id):
                bot.send_message(ADMIN_ID, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {target_id}) —É–¥–∞–ª–µ–Ω.")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, "—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"—É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω: {target_id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
                try:
                    bot.send_message(target_id, "‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.")
                except Exception:
                    logger.warning("Could not notify removed admin %s", target_id)
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except Exception:
            logger.exception("Error in /removeadmin handler: %s", message)

    @bot.message_handler(commands=['admins'])
    def list_admins_command(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_main_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            admins = get_all_admins()
            if not admins:
                bot.send_message(user_id, "üìù –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
                return

            admin_list = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin in admins:
                admin_id, username, first_name, is_main_admin = admin
                role = "üëë –ì–ª–∞–≤–Ω—ã–π" if is_main_admin else "üîπ –û–±—ã—á–Ω—ã–π"
                admin_list += f"{role} –∞–¥–º–∏–Ω: {first_name or 'No name'}"
                if username:
                    admin_list += f" (@{username})"
                admin_list += f" | ID: {admin_id}\n"

            bot.send_message(user_id, admin_list)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
            log_admin_action(user_id, admin_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            
        except Exception:
            logger.exception("Error in /admins handler: %s", message)

    @bot.message_handler(commands=['stats'])
    def stats_command(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            count = get_user_count()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–Ω–∞–º
            try:
                conn = sqlite3.connect(DB_PATH, check_same_thread=False)
                c = conn.cursor()
                c.execute("SELECT COUNT(*) FROM bans WHERE ban_type = 'permanent'")
                permanent_bans = c.fetchone()[0]
                c.execute("SELECT COUNT(*) FROM bans WHERE ban_type = 'temporary'")
                temporary_bans = c.fetchone()[0]
                conn.close()
            except Exception as e:
                logger.error("Failed to get ban stats: %s", e)
                permanent_bans = 0
                temporary_bans = 0

            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n"
            stats_text += f"üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–æ: {permanent_bans}\n"
            stats_text += f"‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–æ: {temporary_bans}"
            
            bot.send_message(user_id, stats_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
            log_admin_action(user_id, admin_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
        except Exception:
            logger.exception("Error in /stats handler: %s", message)

    @bot.message_handler(commands=['getusers'])
    def get_users_command(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            users = get_all_users()
            if not users:
                bot.send_message(user_id, "üìù –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_list = "üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                user_id, username, first_name, last_name = user
                name = first_name or ""
                if last_name:
                    name += f" {last_name}"
                if not name.strip():
                    name = "No name"
                
                user_list += f"üÜî {user_id} | {name}"
                if username:
                    user_list += f" (@{username})"
                user_list += "\n"

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
                if len(user_list) > 3000:
                    bot.send_message(user_id, user_list)
                    user_list = ""

            if user_list:
                bot.send_message(user_id, user_list)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
            log_admin_action(user_id, admin_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
        except Exception:
            logger.exception("Error in /getusers handler: %s", message)

    @bot.message_handler(commands=['sendall'])
    def send_all_command(message):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            user_id = int(message.from_user.id)
            
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return

            parts = message.text.split(' ', 1)
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /sendall –≤–∞—à_—Ç–µ–∫—Å—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏\n\n–ü—Ä–∏–º–µ—Ä:\n/sendall –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞!")
                return

            broadcast_text = parts[1]
            users = get_all_users()
            
            if not users:
                bot.send_message(user_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return

            bot.send_message(user_id, f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

            success_count = 0
            fail_count = 0
            
            for user in users:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if is_banned(user[0]):
                        continue
                        
                    bot.send_message(user[0], f"{broadcast_text}")
                    success_count += 1
                    time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {user[0]}: {e}")
                    fail_count += 1

            bot.send_message(user_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
                                     f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                     f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
                                     f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–±–∞–Ω–µ–Ω—ã): {len(users) - success_count - fail_count}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
            log_admin_action(user_id, admin_name, "—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", f"–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}, —É—Å–ø–µ—à–Ω–æ: {success_count}")
            
        except Exception:
            logger.exception("Error in /sendall handler: %s", message)

    # ==================== –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

    @bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.")
    def handle_contact_request(message):
        try:
            user_id = int(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if ban_info:
                if ban_info['type'] == 'permanent':
                    bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
                else:
                    time_left = format_time_left(ban_info['time_left'])
                    bot.send_message(user_id, f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é. –î–æ —Ä–∞–∑–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            cooldown_remaining = check_button_cooldown(user_id)
            if cooldown_remaining > 0:
                bot.send_message(
                    user_id, 
                    f"‚è≥ –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n\n"
                f"üïí –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {BUTTON_COOLDOWN} —Å–µ–∫—É–Ω–¥",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_text = f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} "
            admin_text += f"@{message.from_user.username or '–±–µ–∑ username'} "
            admin_text += f"(ID: {user_id}) –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins = get_all_admins()
            for admin in admins:
                try:
                    bot.send_message(admin[0], admin_text)
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin[0]}: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            Thread(target=restore_button, args=(user_id,), daemon=True).start()
            
        except Exception:
            logger.exception("Error in contact request handler: %s", message)

    @bot.message_handler(commands=['reply'])
    def start_reply_mode(message):
        try:
            user_id = int(message.from_user.id)
            if not is_admin(user_id):
                bot.send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /reply user_id\n–ü—Ä–∏–º–µ—Ä: /reply 123456789")
                return

            try:
                target_id = int(parts[1])
            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return

            user_reply_mode[user_id] = target_id
            bot.send_message(user_id, f"üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {target_id}")
            
            # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
            
        except Exception:
            logger.exception("Error in /reply handler: %s", message)

    @bot.message_handler(commands=['stop'])
    def stop_reply_mode(message):
        try:
            user_id = int(message.from_user.id)
            if is_admin(user_id):
                if user_id in user_reply_mode:
                    del user_reply_mode[user_id]
                    bot.send_message(user_id, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")
                    
                    # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
                else:
                    bot.send_message(user_id, "üîπ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")
        except Exception:
            logger.exception("Error in /stop handler: %s", message)

    @bot.message_handler(func=lambda message: is_admin(int(message.from_user.id)) and int(message.from_user.id) in user_reply_mode)
    def handle_admin_reply(message):
        try:
            user_id = int(message.from_user.id)
            if message.content_type != 'text':
                bot.send_message(user_id, "‚ùå –í —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                return

            target_user_id = user_reply_mode.get(user_id)
            if not target_user_id:
                bot.send_message(user_id, "‚ùå –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if is_banned(target_user_id):
                bot.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                return

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(target_user_id, f"üíå –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç kvazador:\n\n{message.text}")
                bot.send_message(user_id, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {target_user_id}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
                admin_name = f"{message.from_user.first_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.first_name
                log_admin_action(user_id, admin_name, f"–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id} | –æ—Ç–≤–µ—Ç: {message.text}")
                
            except Exception as e:
                logger.exception("Failed to send admin reply to %s: %s", target_user_id, e)
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        except Exception:
            logger.exception("Error in admin reply handler: %s", message)

    @bot.message_handler(content_types=['text'])
    def forward_text_message(message):
        try:
            user_id = int(message.from_user.id)

            # –ò–≥–Ω–æ—Ä–∏–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)
            if message.text.startswith('/'):
                return

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            if message.text == "üìû –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.":
                return handle_contact_request(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if ban_info:
                if ban_info['type'] == 'permanent':
                    bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞. –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban")
                else:
                    time_left = format_time_left(ban_info['time_left'])
                    bot.send_message(user_id, f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –î–æ —Ä–∞–∑–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
            if not is_admin(user_id):
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            if is_admin(user_id) and user_id not in user_reply_mode:
                bot.send_message(user_id, "‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reply user_id")
                return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.last_name:
                user_info += f" {message.from_user.last_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins = get_all_admins()
            for admin in admins:
                try:
                    bot.send_message(admin[0], f"{user_info}\n\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")
                except Exception as e:
                    logger.error(f"Failed to forward message to admin {admin[0]}: {e}")

            bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ kvazador!")
        except Exception as e:
            logger.exception("Failed to forward text message from %s: %s", getattr(message, "from_user", None), e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å kvazador –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception:
                logger.exception("Also failed to notify user about forwarding error.")

    @bot.message_handler(content_types=['photo', 'voice', 'video', 'document', 'audio'])
    def forward_media_message(message):
        try:
            user_id = int(message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if ban_info:
                if ban_info['type'] == 'permanent':
                    bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞.")
                else:
                    time_left = format_time_left(ban_info['time_left'])
                    bot.send_message(user_id, f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞. –î–æ —Ä–∞–∑–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
            if not is_admin(user_id):
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.last_name:
                user_info += f" {message.from_user.last_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            caption = f"{user_info}\n\n"
            if message.caption:
                caption += f"üìù –ü–æ–¥–ø–∏—Å—å: {message.caption}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins = get_all_admins()
            for admin in admins:
                try:
                    if message.photo:
                        bot.send_photo(admin[0], message.photo[-1].file_id, caption=caption)
                    elif message.voice:
                        bot.send_voice(admin[0], message.voice.file_id, caption=caption)
                    elif message.video:
                        bot.send_video(admin[0], message.video.file_id, caption=caption)
                    elif message.document:
                        bot.send_document(admin[0], message.document.file_id, caption=caption)
                    elif message.audio:
                        bot.send_audio(admin[0], message.audio.file_id, caption=caption)
                    else:
                        bot.send_message(admin[0], f"{user_info}\nüì® –ü—Ä–∏—Å–ª–∞–ª –º–µ–¥–∏–∞, –Ω–æ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
                except Exception as e:
                    logger.error(f"Failed to forward media to admin {admin[0]}: {e}")

            bot.send_message(user_id, "‚úÖ –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ kvazador!")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: %s", e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.")
            except Exception:
                logger.exception("Failed to notify user about media send error.")

    @bot.message_handler(content_types=['contact', 'location'])
    def forward_contact_location(message):
        try:
            user_id = int(message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
            ban_info = is_banned(user_id)
            if ban_info:
                if ban_info['type'] == 'permanent':
                    bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã/–ª–æ–∫–∞—Ü–∏–∏.")
                else:
                    time_left = format_time_left(ban_info['time_left'])
                    bot.send_message(user_id, f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã/–ª–æ–∫–∞—Ü–∏–∏. –î–æ —Ä–∞–∑–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
            if not is_admin(user_id):
                cooldown_remaining = check_cooldown(user_id)
                if cooldown_remaining > 0:
                    bot.send_message(
                        user_id, 
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(cooldown_remaining)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                    return

            user_info = f"üë§ –û—Ç: {message.from_user.first_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {user_id}"
            user_info += f"\n‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins = get_all_admins()
            for admin in admins:
                try:
                    if message.contact:
                        bot.send_contact(
                            admin[0],
                            phone_number=message.contact.phone_number,
                            first_name=message.contact.first_name,
                            last_name=getattr(message.contact, "last_name", None)
                        )
                        bot.send_message(admin[0], f"{user_info}\nüìû –ü—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç")
                    elif message.location:
                        bot.send_location(
                            admin[0],
                            message.location.latitude,
                            message.location.longitude,
                        )
                        bot.send_message(admin[0], f"{user_info}\nüìç –ü—Ä–∏—Å–ª–∞–ª –ª–æ–∫–∞—Ü–∏—é")
                    else:
                        bot.send_message(admin[0], f"{user_info}\nüì® –ü—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç/–ª–æ–∫–∞—Ü–∏—é, –Ω–æ –¥–µ—Ç–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                except Exception as e:
                    logger.error(f"Failed to forward contact/location to admin {admin[0]}: {e}")

            bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã kvazador!")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞/–ª–æ–∫–∞—Ü–∏–∏: %s", e)
            try:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            except Exception:
                logger.exception("Failed to notify user about contact/location send error.")

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ----------------------------

def start_bot_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)."""
    if not bot:
        logger.error("Bot object is not created because BOT_TOKEN is missing.")
        return

    init_db()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    try:
        logger.info("Attempting bot.get_me() to verify token...")
        me = bot.get_me()
        logger.info("Bot connected as: %s (id=%s)", me.username, me.id)
    except Exception as e:
        logger.exception("Failed to connect to Telegram. Check BOT_TOKEN. %s", e)
        return

    logger.info("Bot is ready to receive messages.")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º polling –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
    while True:
        try:
            # logger_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–∑ –º–æ–¥—É–ª—è logging, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–æ–π
            bot.infinity_polling(
                timeout=60,
                long_polling_timeout=60,
                logger_level=logging.INFO
            )
        except Exception as e:
            logger.exception("Polling error: %s", e)
            logger.info("Restarting polling in 10 seconds...")
            time.sleep(10)

if __name__ == "__main__":
    keep_alive()
    try:
        start_bot_loop()
    except KeyboardInterrupt:
        logger.info("Bot stopped by KeyboardInterrupt")
    except Exception:
        logger.exception("Fatal error in main")
